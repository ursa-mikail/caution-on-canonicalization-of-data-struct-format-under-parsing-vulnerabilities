# simulating_malicious_tag_corruption_and_extraction_vulnerability.py
import random
import binascii

def generate_N_bytes(n: int) -> bytes:
    """Generates n random bytes."""
    return random.getrandbits(n * 8).to_bytes(n, byteorder='big')

def corrupt_tag_with_underscores(tag: bytes, position: int, length: int) -> bytes:
    """Corrupt the tag by appending underscores (5f's in hex) at the beginning."""
    # Add padding with underscores (0x5f) before the tag data
    padding = b'\x5f' * (position+length)
    corrupted_tag = padding + tag
    return corrupted_tag

def simulate_tag_extraction(data: bytes, start_pos: int, length: int) -> str:
    """Extracts the tag value from the data starting at a specific position."""
    extracted_value = data[start_pos:start_pos + length]
    return binascii.hexlify(extracted_value).decode('utf-8')

# Define the tag and test extraction
tag = b'_tag:'  # The tag prefix
N = 10  # Number of random bytes to generate
correct_data = generate_N_bytes(N)

original_data = tag + correct_data  # Combine the tag with random bytes
position = len(tag)  # Position where tag extraction starts (just after the tag)
length = N  # Length of the tag to extract

# Simulate the corrupted data by adding underscores at the beginning
corrupted_data = corrupt_tag_with_underscores(original_data, position, length)

# Simulate the extraction of both correct and corrupted data
correct_hex = simulate_tag_extraction(original_data, position, length)
corrupted_hex = simulate_tag_extraction(corrupted_data, position, length)

# Display the results
print(f"Original Data: {original_data}")
print(f"Original Data (Hex): {binascii.hexlify(original_data).decode('utf-8')}")
print(f"Correct_data Data (hex): {correct_data.hex()}")
print(f"Correct Extraction (Hex): {correct_hex}\n")

print(f"Corrupted Data: {corrupted_data}")
print(f"Corrupted Data (Hex): {binascii.hexlify(corrupted_data).decode('utf-8')}")
print(f"Corrupted Extraction (Hex): {corrupted_hex}")

"""
Original Data: b'_tag:w:\\\x97\xab&\xf4-\x81\x06'
Original Data (Hex): 5f7461673a773a5c97ab26f42d8106
Correct_data Data (hex): 773a5c97ab26f42d8106
Correct Extraction (Hex): 773a5c97ab26f42d8106

Corrupted Data: b'________________tag:w:\\\x97\xab&\xf4-\x81\x06'
Corrupted Data (Hex): 5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f5f7461673a773a5c97ab26f42d8106
Corrupted Extraction (Hex): 5f5f5f5f5f5f5f5f5f5f
"""
